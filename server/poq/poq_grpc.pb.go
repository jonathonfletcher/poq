// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: poq.proto

package poq

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PoQ_GetUniverse_FullMethodName   = "/poq.PoQ/GetUniverse"
	PoQ_StartSession_FullMethodName  = "/poq.PoQ/StartSession"
	PoQ_StreamSession_FullMethodName = "/poq.PoQ/StreamSession"
)

// PoQClient is the client API for PoQ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PoQClient interface {
	GetUniverse(ctx context.Context, in *UniverseRequest, opts ...grpc.CallOption) (*UniverseResponse, error)
	StartSession(ctx context.Context, in *SessionStartRequest, opts ...grpc.CallOption) (*SessionStartResponse, error)
	StreamSession(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SessionMessageRequest, SessionMessageResponse], error)
}

type poQClient struct {
	cc grpc.ClientConnInterface
}

func NewPoQClient(cc grpc.ClientConnInterface) PoQClient {
	return &poQClient{cc}
}

func (c *poQClient) GetUniverse(ctx context.Context, in *UniverseRequest, opts ...grpc.CallOption) (*UniverseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UniverseResponse)
	err := c.cc.Invoke(ctx, PoQ_GetUniverse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poQClient) StartSession(ctx context.Context, in *SessionStartRequest, opts ...grpc.CallOption) (*SessionStartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionStartResponse)
	err := c.cc.Invoke(ctx, PoQ_StartSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poQClient) StreamSession(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SessionMessageRequest, SessionMessageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PoQ_ServiceDesc.Streams[0], PoQ_StreamSession_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SessionMessageRequest, SessionMessageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PoQ_StreamSessionClient = grpc.BidiStreamingClient[SessionMessageRequest, SessionMessageResponse]

// PoQServer is the server API for PoQ service.
// All implementations must embed UnimplementedPoQServer
// for forward compatibility.
type PoQServer interface {
	GetUniverse(context.Context, *UniverseRequest) (*UniverseResponse, error)
	StartSession(context.Context, *SessionStartRequest) (*SessionStartResponse, error)
	StreamSession(grpc.BidiStreamingServer[SessionMessageRequest, SessionMessageResponse]) error
	mustEmbedUnimplementedPoQServer()
}

// UnimplementedPoQServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPoQServer struct{}

func (UnimplementedPoQServer) GetUniverse(context.Context, *UniverseRequest) (*UniverseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniverse not implemented")
}
func (UnimplementedPoQServer) StartSession(context.Context, *SessionStartRequest) (*SessionStartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartSession not implemented")
}
func (UnimplementedPoQServer) StreamSession(grpc.BidiStreamingServer[SessionMessageRequest, SessionMessageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamSession not implemented")
}
func (UnimplementedPoQServer) mustEmbedUnimplementedPoQServer() {}
func (UnimplementedPoQServer) testEmbeddedByValue()             {}

// UnsafePoQServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PoQServer will
// result in compilation errors.
type UnsafePoQServer interface {
	mustEmbedUnimplementedPoQServer()
}

func RegisterPoQServer(s grpc.ServiceRegistrar, srv PoQServer) {
	// If the following call pancis, it indicates UnimplementedPoQServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PoQ_ServiceDesc, srv)
}

func _PoQ_GetUniverse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UniverseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoQServer).GetUniverse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoQ_GetUniverse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoQServer).GetUniverse(ctx, req.(*UniverseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoQ_StartSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionStartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoQServer).StartSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PoQ_StartSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoQServer).StartSession(ctx, req.(*SessionStartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PoQ_StreamSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PoQServer).StreamSession(&grpc.GenericServerStream[SessionMessageRequest, SessionMessageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PoQ_StreamSessionServer = grpc.BidiStreamingServer[SessionMessageRequest, SessionMessageResponse]

// PoQ_ServiceDesc is the grpc.ServiceDesc for PoQ service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PoQ_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "poq.PoQ",
	HandlerType: (*PoQServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUniverse",
			Handler:    _PoQ_GetUniverse_Handler,
		},
		{
			MethodName: "StartSession",
			Handler:    _PoQ_StartSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamSession",
			Handler:       _PoQ_StreamSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "poq.proto",
}
